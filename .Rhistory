p <- 0.7
( A <- c( (1-p)^2 , p*(1-p) , (1-p)*p , p^2 ) )
A
hist(A)
-sum( A*log(A) ) 10.8
-sum( A*log(A) )
sim.p <- function(G=1.4) {
x123 <- runif(3)
x4 <- ( (G)*sum(x123)-x123[2]-x123[3] )/(2-G)
z <- sum( c(x123,x4) )
p <- c( x123 , x4 )/z
list( H=-sum( p*log(p) ) , p=p )
}
H <- replicate( 1e5 , sim.p(1.4) )
dens( as.numeric(H[1,]) , adj=0.1 )
H
as.numeric(H[1,])
hist( as.numeric(H[1,]) )
dens( as.numeric(H[1,]) )
as.numeric(H[1,])
as.numeric(H[1,]) %>% plot()
library(tidyverse)
as.numeric(H[1,]) %>% plot()
datasets::ChickWeight
table(datasets::ChickWeight$Diet,datasets::ChickWeight$Time)
table(datasets::ChickWeight$Diet,datasets::ChickWeight$Chick)
table(datasets::ChickWeight$Diet,datasets::ChickWeight$weight)
cw = datasets::ChickWeight
summary(cw$weight)
library(tidyverse)
summary(cw$weight)
cw  = cw %>% mutate(
peso_discreto = case_when(
weight<63  ~ "Bajo",
weight<163.8  ~ "Mediano",
T ~ "Alto"
)
)
cw
table(cw$Diet,cw$peso_discreto)
tabla_peso_dieta = table(cw$Diet,cw$peso_discreto)
chisq.test(tabla_peso_dieta)
?chisq.test
tabla_peso_dieta = table(cw$Diet,cw$peso_discreto)
tabla_peso_dieta
chisq.test(tabla_peso_dieta)
cw_dieta1 = cw %>% filter(Diet == 2)
cw_dieta1 = cw %>% filter(Diet == 1)
cw_dieta2 = cw %>% filter(Diet == 2)
cw_dieta1 = cw %>% filter(Diet == 1)
cw_dieta2 = cw %>% filter(Diet == 2)
chisq.test(tabla_peso_dieta)
cw_dieta1$weight
cw %>% ggplot(aes(x=weight, fill = Diet ))+geom_boxplot()
t.test(cw_dieta1$weight,cw_dieta2$weight)
t.test(cw_dieta1$weight,cw_dieta2$weight,
alternative = 'greater')
cw %>% ggplot(aes(x=weight, fill = Diet ))+geom_boxplot()
cw %>%
ggplot(aes(x=weight, fill = Diet ))+
geom_histogram()
cw %>%
ggplot(aes(x=weight, fill = Diet ))+
geom_density()
cw %>%
ggplot(aes(x=weight, fill = Diet ))+
geom_boxplot()
tabla_peso_dieta
cw_dieta1$weight
cw_dieta2$weight
t.test(cw_dieta1$weight,cw_dieta2$weight)
t.test(cw_dieta1$weight,cw_dieta2$weight,
alternative = 'greater')
?ks.test
## Num vs Num
cw$Time
cw$weight
cor.test(cw$weight,cw$Time)
cor(cw$weight,cw$Time)
cor.test(cw$weight,cw$Time)
cor(cw$weight,cw$Time)
cor.test(cw$weight,cw$Time)
#COMPARA FUNCION DE DISTRIBUCION ACUMULATIVA
#COMPARA SI PROVIENEN DE LA MISMA DISTRIBUCION
ks.test(cw_dieta1$weight,cw_dieta2$weight)
ks.test(cw_dieta1$weight,cw_dieta2$weight,
alternative = 'greater')
##Separando poblaciones de la numerica
cw %>%
ggplot(aes(x=weight, fill = Diet ))+
geom_boxplot()
ggplot(aes(x=weight, fill = Diet ))+
geom_density(alpha = 0.6)
cw %>%filter(Diet %in% c(1,2)) %>%
ggplot(aes(x=weight, fill = Diet ))+
geom_density(alpha = 0.6)
#SOLAMENTE COMPARA PROMEDIOS
t.test(cw_dieta1$weight,cw_dieta2$weight)
t.test(cw_dieta1$weight,cw_dieta2$weight,
alternative = 'greater')
#COMPARA FUNCION DE DISTRIBUCION ACUMULATIVA
#COMPARA SI PROVIENEN DE LA MISMA DISTRIBUCION
ks.test(cw_dieta1$weight,cw_dieta2$weight)
ks.test(cw_dieta1$weight,cw_dieta2$weight,
alternative = 'greater')
## Num vs Num
cor.test(cw$weight,cw$Time)
cor(cw$weight,cw$Time)
t.test
?t.test
#HO: x1 <= x2
#H1: x1 > x2
t.test(cw_dieta1$weight,cw_dieta2$weight,
alternative = 'greater')
#H0: Independencia entre las filas y columnas de la
#tabla de contingencia
chisq.test(tabla_peso_dieta)
?chisq.test
tabla_peso_dieta
?ks.test
#COMPARA FUNCION DE DISTRIBUCION ACUMULATIVA
#COMPARA SI PROVIENEN DE LA MISMA DISTRIBUCION
#H0:
ks.test(cw_dieta1$weight,cw_dieta2$weight)
#COMPARA FUNCION DE DISTRIBUCION ACUMULATIVA
#COMPARA SI PROVIENEN DE LA MISMA DISTRIBUCION
#H0: Funcion de Distribucion Acumulativa
#es la misma
ks.test(cw_dieta1$weight,cw_dieta2$weight)
mean(cw_dieta1$weight)
#COMPARA FUNCION DE DISTRIBUCION ACUMULATIVA
#COMPARA SI PROVIENEN DE LA MISMA DISTRIBUCION
#H0: Funcion de Distribucion Acumulativa
#es la misma
rnorm(100,102,1)
ks.test(cw_dieta1$weight,rnorm(100,102,1))
cw_dieta1$weight
rnorm(100,102,1)
aad<-function(x,fun=median){
mean(abs(x-fun(x)))
}
aad<-function(x,fun=median){
mean(abs(x-fun(x)))
}
aad(Sepal.Length)
0.6846667
aad<-function(x,fun=median){
mean(abs(x-fun(x)))
}
aad(Sepal.Length)
aad(iris$Sepal.Length)
0.6846667
ad(iris$Sepal.Length,mean)
aad(iris$Sepal.Length)
sd(iris$Sepal.Length)
tapply(iris$Petal.Length,iris$Species,summary)
my_mode<-function(var){
frec.var <- table(var)
valor<-which(frec.var==max(frec.var)) # Elementos con el valor names(valor)
}
my_mode(iris$Species)
my_mode<-function(var){
frec.var <- table(var)
valor<-which(frec.var==max(frec.var)) # Elementos con el valor names(valor)
valor
}
my_mode(iris$Species)
my_mode<-function(var){
frec.var <- table(var)
valor<-which(frec.var==max(frec.var)) # Elementos con el valor names(valor)
frec.var
}
my_mode(iris$Species)
valor<-which(frec.var==max(frec.var)) # Elementos con el valor names(valor)
frec.var <- table(var)
my_mode<-function(var){
frec.var <- table(var)
valor<-which(frec.var==max(frec.var)) # Elementos con el valor names(valor)
frec.var==max(frec.var)
}
my_mode(iris$Species)
my_mode(iris$Sepal.Length)
my_mode<-function(var){
frec.var <- table(var)
valor<-which(frec.var==max(frec.var)) # Elementos con el valor names(valor)
#frec.var==max(frec.var)
valor
}
my_mode(iris$Species)
my_mode(iris$Sepal.Length)
z = (iris$Sepal.Length-mean(iris$Sepal.Length))/sd(iris$Sepal.Length)
z
which(abs(z) > 2)
z
library(raster)
library(rgdal)
library(tidyverse)
library(raster)
r = stack("C:\\Users\\HP\\OneDrive\\pytorch\\torchgeo\\renabap\\raster_multiband\\out.tif")
r
plot(r)
library(raster)
r = stack("C:/Users/HP/OneDrive/pytorch/torchgeo/renabap/raster_multiband/out.tif")
plot(r)
install.packages("methods")
0.0000001
setwd("C:/Users/HP/OneDrive/VizApp/apiR/apiR")
library(plumber)
# 'plumber.R' is the location of the file shown above
pr("poligonize.R") %>%
pr_run(port=8000)
library(plumber)
# 'plumber.R' is the location of the file shown above
pr("poligonize.R") %>%
pr_run(port=8000)
# 'plumber.R' is the location of the file shown above
pr("poligonize.R") %>%
pr_run(port=8000)
# 'plumber.R' is the location of the file shown above
pr("poligonize.R") %>%
pr_run(port=8000)
# 'plumber.R' is the location of the file shown above
pr("poligonize.R") %>%
pr_run(port=8001)
p2r=8
bp = "C:/Users/HP/OneDrive/VizApp/apiPred/apiPred/output_pred/"
bp
p2r = paste0(bp,p2r)
p2r
p2r = paste0(bp,p2r,"_",anio,".tif")
anio = 2021
p2r = paste0(bp,p2r,"_",anio,".tif")
p2r
r1 = raster(p2r)
p2r
nom = p2r
bp = "C:/Users/HP/OneDrive/VizApp/apiPred/apiPred/output_pred/"
bp
nom
p2r=8
nom = p2r
bp = "C:/Users/HP/OneDrive/VizApp/apiPred/apiPred/output_pred/"
p2r = paste0(bp,p2r,"_",anio,".tif")
p2r
r1 = raster(p2r)
# plumber.R
amba <- read_sf("C:/Users/HP/OneDrive/VizApp/git/vizapp/data/amba.geojson")
barrio = amba[amba$renabap_id==nom,]
barrio
plot(barrio)
pg = paste0(strsplit(p2r,'.tif')[[1]],'.geojson')
pg
# 'plumber.R' is the location of the file shown above
pr("poligonize.R") %>%
pr_run(port=8001)
# 'plumber.R' is the location of the file shown above
pr("poligonize.R") %>%
pr_run(port=8001)
read_sf('C:/Users/HP/OneDrive/VizApp/apiPred/apiPred/output_pred/8_2021.geojson')
read_sf('C:/Users/HP/OneDrive/VizApp/apiPred/apiPred/output_pred/8_2021.geojson') %>% plot()
# 'plumber.R' is the location of the file shown above
pr("poligonize.R") %>%
pr_run(port=8001)
# 'plumber.R' is the location of the file shown above
pr("poligonize.R") %>%
pr_run(port=8001)
library(plumber)
setwd("C:/Users/HP/OneDrive/VizApp/apiR/apiR")
# 'plumber.R' is the location of the file shown above
pr("poligonize.R") %>%
pr_run(port=8001)
